let accountState = !0, expired = !0, cookieName = null; async function cookieChecker(e) { let t = await chrome.cookies.getAll({ url: "https://textfromvideoai.onrender.com/" }); for (let e in t) { if ("Auth_Cookie" === t[e].name) { expired = !1; break } expired = !0 } e(expired ? { status: !1, message: "website not logged in" } : { status: !0, message: "website logged in" }) } function sendMessage(e) { chrome.tabs.query({ active: !0, currentWindow: !0 }, (t => { if (!t[0].url.startsWith("http")) return chrome.notifications.create({ title: "img2Text Error", message: "PROHIBITED PAGE!", iconUrl: "/res/icon24.png", type: "basic" }); const o = t[0].id; chrome.tabs.sendMessage(o, e) })) } function xget(e, t) { (async () => { try { let o = await fetch(e); const s = (await o.json()).message; return t({ payload: s }) } catch (e) { console.log(e), chrome.runtime.sendMessage({ source: "xget", message: "Server not available. Try again!" }) } })() } function openTab(e, t) { chrome.tabs.create({ url: e }) } chrome.runtime.onInstalled.addListener((async function (e) { "install" === e.reason || e.reason })), chrome.runtime.onMessage.addListener(((e, t, o) => { if ("from-popup-checkauth" === e.message) cookieChecker(o); else if ("from-popup-account-status" === e.message) xget("https://textfromvideoai.onrender.com/users/account-state", o); else if ("from-popup-wp" === e.message) chrome.tabs.captureVisibleTab(null, { format: "png" }, (function (e) { const t = e.startsWith("data:image/png;base64"); if (console.log("taken? ", t), t) { chrome.storage.local.set({ whole_imgUrl: e }).then((() => { })); const t = `img2Text_${Date.now()}.png`; chrome.downloads.download({ url: e, filename: t, conflictAction: "uniquify", saveAs: !1 }).then((e => { e && (chrome.notifications.create({ title: "img2Text", message: "Image is currently being processed. Expect it to be open in a new tab in a hot minute", iconUrl: "/res/icon24.png", type: "basic" }), openTab("/web/full/res.html", { page: "whole" })) })), o({ message: "screenshot taken", payload: e }) } })); else if ("from-popup-cus" === e.message) sendMessage({ action: "processImg" }); else if ("capture" === e.action) chrome.tabs.captureVisibleTab(null, { format: "png" }, (e => { o({ image: e }) })); else if ("from-newtab-getUrl-cus" === e.message) chrome.storage.local.get(["cus_imgUrl"]).then((e => { o({ data: e }) })); else if ("from-newtab-getUrl-whole" === e.message) chrome.storage.local.get(["whole_imgUrl"]).then((e => { o({ data: e }) })); else if ("download" === e.action) { const t = e.dataUrl; if (chrome.storage.local.set({ cus_imgUrl: t }).then((() => { })), openTab("/web/custom/res.html", { page: "cus" }), t) { const e = `img2Text_${Date.now()}.png`; chrome.downloads.download({ url: t, filename: e, conflictAction: "uniquify", saveAs: !1 }).then((e => { e && chrome.notifications.create({ title: "img2Text", message: "Image is currently being processed. Expect it to be open in a new tab in a hot minute", iconUrl: "/res/icon24.png", type: "basic" }) })) } } else try { o({ message: "fail" }) } catch (e) { console.log(e) } return !0 }));